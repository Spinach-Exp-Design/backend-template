name: CI/CD

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: 905418210455.dkr.ecr.ap-south-1.amazonaws.com/flask-app

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    outputs:
      instance_id: ${{ steps.save_instance_id.outputs.INSTANCE_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
          terraform_wrapper: false

      - name: Install AWS CLI
        run: sudo apt-get install -y awscli

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: terraform apply -auto-approve tfplan

      - name: Get Terraform Output
        id: tf-output
        run: terraform output -json > terraform_output.json

      - name: Save Instance ID
        id: save_instance_id
        run: |
          INSTANCE_ID=$(jq -r '.instance_id.value' terraform_output.json)
          echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV
          echo "::set-output name=INSTANCE_ID::${INSTANCE_ID}"

  build-and-push:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY }}

      - name: Build Docker Image
        run: |
          docker build -t flask-app .

      - name: Tag Docker Image
        run: |
          docker tag flask-app:latest ${{ env.ECR_REPOSITORY }}:latest

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ env.ECR_REPOSITORY }}:latest


  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Echo Environment Variables
        run: |
          echo "INSTANCE_ID=${{ needs.terraform.outputs.instance_id }}"
          echo "ECR_REPOSITORY=${{ env.ECR_REPOSITORY }}"

      - name: Execute Docker Commands on AWS Instance to Deploy the Application
        run: |
          command_id=$(aws ssm send-command \
            --instance-ids ${{ needs.terraform.outputs.instance_id }} \
            --document-name "AWS-RunShellScript" \
            --comment "Executing Docker operations" \
            --parameters commands='[
              "set -e",
              "trap '\''echo DOCKER_STOP_FAILURE 1>&2'\'' ERR; if docker ps --format '\''{{.Names}}'\'' | grep -q flask-app; then docker stop flask-app; fi",
              "trap '\''echo DOCKER_LOGIN_FAILURE 1>&2'\'' ERR; aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY }}",
              "trap '\''echo DOCKER_PULL_FAILURE 1>&2'\'' ERR; docker pull ${{ env.ECR_REPOSITORY }}:latest",
              "trap '\''echo DOCKER_RUN_FAILURE 1>&2'\'' ERR; docker run -d -p 5000:5000 --name flask-app ${{ env.ECR_REPOSITORY }}:latest"
            ]' --query 'Command.CommandId' --output text)

          echo "command_id=$command_id" >> $GITHUB_ENV

      - name: Check Command Status
        run: |
          aws ssm list-command-invocations --command-id ${{ env.command_id }} --details
